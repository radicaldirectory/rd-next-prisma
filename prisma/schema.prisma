// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map(name: "email_verified")
  image         String?
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")
  posts         Post[]
  events        UsersOnEvents[]
  groups        UsersOnGroups[]

  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   Json
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
  group     Group?  @relation(fields: [groupId], references: [id])
  groupId   Int?
  event     Event?  @relation(fields: [eventId], references: [id])
  eventId   Int?
}

//new models

model Document {
  id        Int      @id @default(autoincrement())
  content   Json
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  group     Group?
  tag       Tag?
  event     Event?
}

model Media {
  id        Int      @id @default(autoincrement())
  name      String
  metadata  Json
  url       String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model Group {
  id         Int             @id @default(autoincrement())
  name       String
  location   Json
  acronym    String?         @db.VarChar(16)
  document   Document        @relation(fields: [documentId], references: [id])
  documentId Int
  posts      Post[]
  tags       TagsOnGroups[]
  users      UsersOnGroups[]
  parents    Group[]         @relation("Subgroup")
  children   Group[]         @relation("Subgroup")
}

model Tag {
  name       String         @id
  document   Document?      @relation(fields: [documentId], references: [id])
  documentId Int?
  groups     TagsOnGroups[]
  events     TagsOnEvents[]
}

model Event {
  id         Int             @id @default(autoincrement())
  name       String
  eventStart DateTime
  eventEnd   DateTime
  location   Json
  document   Document        @relation(fields: [documentId], references: [id])
  documentId Int
  posts      Post[]
  tags       TagsOnEvents[]
  users      UsersOnEvents[]
}

model TagsOnGroups {
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  tag       Tag      @relation(fields: [tagId], references: [name])
  tagId     String
  createdAt DateTime @default(now())

  @@id([groupId, tagId])
}

model TagsOnEvents {
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  tag       Tag      @relation(fields: [tagId], references: [name])
  tagId     String
  createdAt DateTime @default(now())

  @@id([eventId, tagId])
}

model UsersOnGroups {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
  role    Role  @default(NONE)

  @@id([userId, groupId])
}

model UsersOnEvents {
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  event   Event   @relation(fields: [eventId], references: [id])
  eventId Int
  isHost  Boolean @default(false)

  @@id([userId, eventId])
}

enum Role {
  NONE
  ADMIN
  MEMBER
}
